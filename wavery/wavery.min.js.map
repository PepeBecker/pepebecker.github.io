{"version":3,"sources":["webpack://Wavery/webpack/universalModuleDefinition","webpack://Wavery/webpack/bootstrap","webpack://Wavery/(webpack)/buildin/amd-define.js","webpack://Wavery/(webpack)/buildin/module.js","webpack://Wavery/(webpack)/buildin/amd-options.js","webpack://Wavery/./node_modules/seedrandom/index.js","webpack://Wavery/./node_modules/chroma-js/chroma.js","webpack://Wavery/./node_modules/seedrandom/lib/alea.js","webpack://Wavery/./node_modules/seedrandom/lib/xor128.js","webpack://Wavery/./node_modules/seedrandom/lib/xorwow.js","webpack://Wavery/./node_modules/seedrandom/lib/xorshift7.js","webpack://Wavery/./node_modules/seedrandom/lib/xor4096.js","webpack://Wavery/./node_modules/seedrandom/lib/tychei.js","webpack://Wavery/./node_modules/seedrandom/seedrandom.js","webpack://Wavery/./lib/bezier-spline.js","webpack://Wavery/./lib/wavery.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Error","webpackPolyfill","deprecate","paths","children","__webpack_amd_options__","alea","xor128","xorwow","xorshift7","xor4096","tychei","sr","limit","x","min","max","classToType","list","length","toLowerCase","type","obj","toString","PI","Math","utils","clip_rgb","rgb","_clipped","_unclipped","slice","unpack","args","keyOrder","Array","split","filter","k","undefined","map","last","TWOPI","PITHIRD","DEG2RAD","RAD2DEG","input","format","autodetect","last$1","clip_rgb$1","type$1","Color","len","arguments","me","this","constructor","sorted","sort","a","b","chk","test","apply","_rgb","push","hex","join","Color_1","chroma","Function","concat","version","chroma_1","unpack$1","rgb2cmyk_1","ref","g","f","y","unpack$2","cmyk2rgb_1","alpha","unpack$3","type$2","cmyk","unpack$4","last$2","rnd","round","hsl2css_1","hsla","unpack$5","rgb2hsl_1","h","Number","NaN","unpack$6","last$3","rgb2css_1","rgba","substr","unpack$7","round$1","hsl2rgb_1","assign","t3","t2","t1","h_","RE_RGB","RE_RGBA","RE_RGB_PCT","RE_RGBA_PCT","RE_HSL","RE_HSLA","round$2","css2rgb","css","trim","named","e","match","rgb$1","i$1","rgb$2","i$2","rgb$3","i$3","hsl","rgb$4","hsl$1","rgb$5","css2rgb_1","type$3","rest","unpack$8","gl","unpack$9","rgb2hcg_1","delta","_g","unpack$a","floor","hcg2rgb_1","assign$1","assign$2","assign$3","assign$4","assign$5","_c","q","v","unpack$b","type$4","hcg","unpack$c","last$4","round$3","rgb2hex_1","u","str","hxa","RE_HEX","RE_HEXA","hex2rgb_1","parseInt","u$1","r$1","g$1","b$1","type$5","includes","unpack$d","sqrt","acos","rgb2hsi_1","min_","unpack$e","limit$1","TWOPI$1","cos","hsi2rgb_1","isNaN","unpack$f","type$6","hsi","unpack$g","type$7","unpack$h","min$1","max$1","rgb2hsv","max_","unpack$i","floor$1","hsv2rgb_1","unpack$j","type$8","hsv","labConstants","Kn","Xn","Yn","Zn","t0","unpack$k","pow","rgb_xyz","xyz_lab","rgb2xyz","z","rgb2lab_1","ref$1","unpack$l","pow$1","xyz_rgb","lab_xyz","lab2rgb_1","b_","unpack$m","type$9","lab","unpack$n","sqrt$1","atan2","round$4","lab2lch_1","unpack$o","rgb2lch_1","unpack$p","sin","cos$1","lch2lab_1","unpack$q","lch2rgb_1","L","unpack$r","hcl2rgb_1","hcl","reverse","unpack$s","type$a","lch","forEach","w3cx11_1","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","type$b","keys","unpack$t","rgb2num_1","type$c","num2rgb_1","num","type$d","unpack$u","type$e","round$5","log","temperature2rgb_1","kelvin","temp","unpack$v","round$6","rgb2temperature_1","minTemp","maxTemp","eps","temperature","type$f","mutate","clipped","darken","amount","brighten","darker","brighter","mc","channel","src","indexOf","type$g","pow$2","luminance","lum","cur_lum","max_iter","low","high","mid","interpolate","lm","abs","rgb2luminance","luminance_x","interpolator","type$h","mix","col1","col2","premultiply","saturate","desaturate","type$i","set","charAt","out","xyz0","xyz1","sqrt$2","pow$3","lrgb","x1","y1","z1","x2","y2","z2","_hsx","hue0","hue1","sat0","sat1","lbv0","lbv1","sat","hue","lch$1","c1","c2","clip_rgb$2","pow$4","sqrt$3","PI$1","cos$2","sin$1","atan2$1","_average_lrgb","colors","xyz","col","type$j","pow$5","scale","_mode","_nacol","_spread","_domain","_pos","_padding","_classes","_colors","_out","_min","_max","_correctLightness","_colorCache","_useCache","_gamma","setColors","brewer","c$1","resetCache","tmap","getColor","val","bypassMap","getClass","classes","analyze","limits","domain","from","_m","range","_o","spread","correctLightness","L0","L1","pol","L_actual","L_ideal","L_diff","padding","numColors","result","dm","dd","__range__","samples","end","asc","cache","gamma","nodata","left","right","inclusive","ascending","bezier","I","lab0","lab1","lab2","lab3","I0","I1","blend","bottom","top","blend_f","c0","each","normal","multiply","screen","overlay","lighten","dodge","burn","blend_1","type$k","clip_rgb$3","TWOPI$2","pow$6","sin$2","cos$3","floor$2","random","log$1","pow$7","floor$3","data","MAX_VALUE","sum","values","count","min_log","LOG10E","max_log","pb","pr","cluster","assignments","clusterSizes","repeat","nb_iters","centroids","j","i$4","mindist","best","j$1","dist","newCentroids","j$2","i$5","j$3","j$4","kClusters","j$5","i$6","tmpKMeansBreaks","j$6","i$7","analyze_1","sqrt$4","atan2$2","abs$1","cos$4","PI$2","scales","cool","hot","colorbrewer","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","list$1","colorbrewer_1","average","first","shift","cnt","dx","dy","A","xyz2","A$1","cubehelix","start","rotations","lightness","dl","dh","fract","amp","cos_a","sin_a","code","contrast","l1","l2","deltaE","C","a1","b1","L2","a2","b2","sl","sc","h1","c4","sh","delC","delA","delB","v1","v2","distance","sum_sq","valid","__WEBPACK_AMD_DEFINE_RESULT__","global","Alea","seed","mash","String","charCodeAt","next","s0","s1","s2","copy","impl","opts","xg","state","prng","int32","double","quick","XorGen","strseed","w","X","init","Date","pool","math","nodecrypto","eval","width","chunks","rngname","startdenom","significance","overflow","mask","seedrandom","options","callback","shortseed","mixkey","flatten","depth","prop","typ","entropy","tostring","randomBytes","Uint8Array","crypto","msCrypto","getRandomValues","browser","navigator","plugins","autoseed","arc4","ARC4","S","pass","is_math_call","keylen","smear","stringseed","fromCharCode","ex","computeControlPoints","K","p1","p2","svgns","defaultOptions","height","segmentCount","layerCount","variance","strokeWidth","strokeColor","now","gradientColors","colorValue","position","generateClosedPath","curvePoints","leftCornerPoint","rightCornerPoint","filleColor","xPoints","yPoints","xControlPoints","yControlPoints","path","svgPath","document","createElementNS","setAttributeNS","Wavery","_classCallCheck","_defineProperty","_objectSpread2","points","randFunc","cellWidth","cellHeight","moveLimitX","moveLimitY","pointsPerLayer","varietalY","varietalX","generatePoints","_this","svg","setAttribute","colorScale","rect","appendChild"],"mappings":"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","file":"wavery.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Wavery\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Wavery\"] = factory();\n\telse\n\t\troot[\"Wavery\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = function() {\n\tthrow new Error(\"define cannot be used indirect\");\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/**\n * chroma.js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2019, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n * derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * -------------------------------------------------------\n *\n * chroma.js includes colors from colorbrewer2.org, which are released under\n * the following license:\n *\n * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,\n * and The Pennsylvania State University.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n *\n * ------------------------------------------------------\n *\n * Named colors are taken from X11 Color Names.\n * http://www.w3.org/TR/css3-color/#svg-color\n *\n * @preserve\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.chroma = factory());\n}(this, (function () { 'use strict';\n\n    var limit = function (x, min, max) {\n        if ( min === void 0 ) min=0;\n        if ( max === void 0 ) max=1;\n\n        return x < min ? min : x > max ? max : x;\n    };\n\n    var clip_rgb = function (rgb) {\n        rgb._clipped = false;\n        rgb._unclipped = rgb.slice(0);\n        for (var i=0; i<=3; i++) {\n            if (i < 3) {\n                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }\n                rgb[i] = limit(rgb[i], 0, 255);\n            } else if (i === 3) {\n                rgb[i] = limit(rgb[i], 0, 1);\n            }\n        }\n        return rgb;\n    };\n\n    // ported from jQuery's $.type\n    var classToType = {};\n    for (var i = 0, list = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Undefined', 'Null']; i < list.length; i += 1) {\n        var name = list[i];\n\n        classToType[(\"[object \" + name + \"]\")] = name.toLowerCase();\n    }\n    var type = function(obj) {\n        return classToType[Object.prototype.toString.call(obj)] || \"object\";\n    };\n\n    var unpack = function (args, keyOrder) {\n        if ( keyOrder === void 0 ) keyOrder=null;\n\n    \t// if called with more than 3 arguments, we return the arguments\n        if (args.length >= 3) { return Array.prototype.slice.call(args); }\n        // with less than 3 args we check if first arg is object\n        // and use the keyOrder string to extract and sort properties\n    \tif (type(args[0]) == 'object' && keyOrder) {\n    \t\treturn keyOrder.split('')\n    \t\t\t.filter(function (k) { return args[0][k] !== undefined; })\n    \t\t\t.map(function (k) { return args[0][k]; });\n    \t}\n    \t// otherwise we just return the first argument\n    \t// (which we suppose is an array of args)\n        return args[0];\n    };\n\n    var last = function (args) {\n        if (args.length < 2) { return null; }\n        var l = args.length-1;\n        if (type(args[l]) == 'string') { return args[l].toLowerCase(); }\n        return null;\n    };\n\n    var PI = Math.PI;\n\n    var utils = {\n    \tclip_rgb: clip_rgb,\n    \tlimit: limit,\n    \ttype: type,\n    \tunpack: unpack,\n    \tlast: last,\n    \tPI: PI,\n    \tTWOPI: PI*2,\n    \tPITHIRD: PI/3,\n    \tDEG2RAD: PI / 180,\n    \tRAD2DEG: 180 / PI\n    };\n\n    var input = {\n    \tformat: {},\n    \tautodetect: []\n    };\n\n    var last$1 = utils.last;\n    var clip_rgb$1 = utils.clip_rgb;\n    var type$1 = utils.type;\n\n\n    var Color = function Color() {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var me = this;\n        if (type$1(args[0]) === 'object' &&\n            args[0].constructor &&\n            args[0].constructor === this.constructor) {\n            // the argument is already a Color instance\n            return args[0];\n        }\n\n        // last argument could be the mode\n        var mode = last$1(args);\n        var autodetect = false;\n\n        if (!mode) {\n            autodetect = true;\n            if (!input.sorted) {\n                input.autodetect = input.autodetect.sort(function (a,b) { return b.p - a.p; });\n                input.sorted = true;\n            }\n            // auto-detect format\n            for (var i = 0, list = input.autodetect; i < list.length; i += 1) {\n                var chk = list[i];\n\n                mode = chk.test.apply(chk, args);\n                if (mode) { break; }\n            }\n        }\n\n        if (input.format[mode]) {\n            var rgb = input.format[mode].apply(null, autodetect ? args : args.slice(0,-1));\n            me._rgb = clip_rgb$1(rgb);\n        } else {\n            throw new Error('unknown format: '+args);\n        }\n\n        // add alpha channel\n        if (me._rgb.length === 3) { me._rgb.push(1); }\n    };\n\n    Color.prototype.toString = function toString () {\n        if (type$1(this.hex) == 'function') { return this.hex(); }\n        return (\"[\" + (this._rgb.join(',')) + \"]\");\n    };\n\n    var Color_1 = Color;\n\n    var chroma = function () {\n    \tvar args = [], len = arguments.length;\n    \twhile ( len-- ) args[ len ] = arguments[ len ];\n\n    \treturn new (Function.prototype.bind.apply( chroma.Color, [ null ].concat( args) ));\n    };\n\n    chroma.Color = Color_1;\n    chroma.version = '2.0.4';\n\n    var chroma_1 = chroma;\n\n    var unpack$1 = utils.unpack;\n    var max = Math.max;\n\n    var rgb2cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$1(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r = r / 255;\n        g = g / 255;\n        b = b / 255;\n        var k = 1 - max(r,max(g,b));\n        var f = k < 1 ? 1 / (1-k) : 0;\n        var c = (1-r-k) * f;\n        var m = (1-g-k) * f;\n        var y = (1-b-k) * f;\n        return [c,m,y,k];\n    };\n\n    var rgb2cmyk_1 = rgb2cmyk;\n\n    var unpack$2 = utils.unpack;\n\n    var cmyk2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$2(args, 'cmyk');\n        var c = args[0];\n        var m = args[1];\n        var y = args[2];\n        var k = args[3];\n        var alpha = args.length > 4 ? args[4] : 1;\n        if (k === 1) { return [0,0,0,alpha]; }\n        return [\n            c >= 1 ? 0 : 255 * (1-c) * (1-k), // r\n            m >= 1 ? 0 : 255 * (1-m) * (1-k), // g\n            y >= 1 ? 0 : 255 * (1-y) * (1-k), // b\n            alpha\n        ];\n    };\n\n    var cmyk2rgb_1 = cmyk2rgb;\n\n    var unpack$3 = utils.unpack;\n    var type$2 = utils.type;\n\n\n\n    Color_1.prototype.cmyk = function() {\n        return rgb2cmyk_1(this._rgb);\n    };\n\n    chroma_1.cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['cmyk']) ));\n    };\n\n    input.format.cmyk = cmyk2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$3(args, 'cmyk');\n            if (type$2(args) === 'array' && args.length === 4) {\n                return 'cmyk';\n            }\n        }\n    });\n\n    var unpack$4 = utils.unpack;\n    var last$2 = utils.last;\n    var rnd = function (a) { return Math.round(a*100)/100; };\n\n    /*\n     * supported arguments:\n     * - hsl2css(h,s,l)\n     * - hsl2css(h,s,l,a)\n     * - hsl2css([h,s,l], mode)\n     * - hsl2css([h,s,l,a], mode)\n     * - hsl2css({h,s,l,a}, mode)\n     */\n    var hsl2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hsla = unpack$4(args, 'hsla');\n        var mode = last$2(args) || 'lsa';\n        hsla[0] = rnd(hsla[0] || 0);\n        hsla[1] = rnd(hsla[1]*100) + '%';\n        hsla[2] = rnd(hsla[2]*100) + '%';\n        if (mode === 'hsla' || (hsla.length > 3 && hsla[3]<1)) {\n            hsla[3] = hsla.length > 3 ? hsla[3] : 1;\n            mode = 'hsla';\n        } else {\n            hsla.length = 3;\n        }\n        return (mode + \"(\" + (hsla.join(',')) + \")\");\n    };\n\n    var hsl2css_1 = hsl2css;\n\n    var unpack$5 = utils.unpack;\n\n    /*\n     * supported arguments:\n     * - rgb2hsl(r,g,b)\n     * - rgb2hsl(r,g,b,a)\n     * - rgb2hsl([r,g,b])\n     * - rgb2hsl([r,g,b,a])\n     * - rgb2hsl({r,g,b,a})\n     */\n    var rgb2hsl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$5(args, 'rgba');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n\n        var l = (max + min) / 2;\n        var s, h;\n\n        if (max === min){\n            s = 0;\n            h = Number.NaN;\n        } else {\n            s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n        }\n\n        if (r == max) { h = (g - b) / (max - min); }\n        else if (g == max) { h = 2 + (b - r) / (max - min); }\n        else if (b == max) { h = 4 + (r - g) / (max - min); }\n\n        h *= 60;\n        if (h < 0) { h += 360; }\n        if (args.length>3 && args[3]!==undefined) { return [h,s,l,args[3]]; }\n        return [h,s,l];\n    };\n\n    var rgb2hsl_1 = rgb2hsl;\n\n    var unpack$6 = utils.unpack;\n    var last$3 = utils.last;\n\n\n    var round = Math.round;\n\n    /*\n     * supported arguments:\n     * - rgb2css(r,g,b)\n     * - rgb2css(r,g,b,a)\n     * - rgb2css([r,g,b], mode)\n     * - rgb2css([r,g,b,a], mode)\n     * - rgb2css({r,g,b,a}, mode)\n     */\n    var rgb2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack$6(args, 'rgba');\n        var mode = last$3(args) || 'rgb';\n        if (mode.substr(0,3) == 'hsl') {\n            return hsl2css_1(rgb2hsl_1(rgba), mode);\n        }\n        rgba[0] = round(rgba[0]);\n        rgba[1] = round(rgba[1]);\n        rgba[2] = round(rgba[2]);\n        if (mode === 'rgba' || (rgba.length > 3 && rgba[3]<1)) {\n            rgba[3] = rgba.length > 3 ? rgba[3] : 1;\n            mode = 'rgba';\n        }\n        return (mode + \"(\" + (rgba.slice(0,mode==='rgb'?3:4).join(',')) + \")\");\n    };\n\n    var rgb2css_1 = rgb2css;\n\n    var unpack$7 = utils.unpack;\n    var round$1 = Math.round;\n\n    var hsl2rgb = function () {\n        var assign;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$7(args, 'hsl');\n        var h = args[0];\n        var s = args[1];\n        var l = args[2];\n        var r,g,b;\n        if (s === 0) {\n            r = g = b = l*255;\n        } else {\n            var t3 = [0,0,0];\n            var c = [0,0,0];\n            var t2 = l < 0.5 ? l * (1+s) : l+s-l*s;\n            var t1 = 2 * l - t2;\n            var h_ = h / 360;\n            t3[0] = h_ + 1/3;\n            t3[1] = h_;\n            t3[2] = h_ - 1/3;\n            for (var i=0; i<3; i++) {\n                if (t3[i] < 0) { t3[i] += 1; }\n                if (t3[i] > 1) { t3[i] -= 1; }\n                if (6 * t3[i] < 1)\n                    { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }\n                else if (2 * t3[i] < 1)\n                    { c[i] = t2; }\n                else if (3 * t3[i] < 2)\n                    { c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6; }\n                else\n                    { c[i] = t1; }\n            }\n            (assign = [round$1(c[0]*255),round$1(c[1]*255),round$1(c[2]*255)], r = assign[0], g = assign[1], b = assign[2]);\n        }\n        if (args.length > 3) {\n            // keep alpha channel\n            return [r,g,b,args[3]];\n        }\n        return [r,g,b,1];\n    };\n\n    var hsl2rgb_1 = hsl2rgb;\n\n    var RE_RGB = /^rgb\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*\\)$/;\n    var RE_RGBA = /^rgba\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n    var RE_RGB_PCT = /^rgb\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n    var RE_RGBA_PCT = /^rgba\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n    var RE_HSL = /^hsl\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n    var RE_HSLA = /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\n    var round$2 = Math.round;\n\n    var css2rgb = function (css) {\n        css = css.toLowerCase().trim();\n        var m;\n\n        if (input.format.named) {\n            try {\n                return input.format.named(css);\n            } catch (e) {\n                // eslint-disable-next-line\n            }\n        }\n\n        // rgb(250,20,0)\n        if ((m = css.match(RE_RGB))) {\n            var rgb = m.slice(1,4);\n            for (var i=0; i<3; i++) {\n                rgb[i] = +rgb[i];\n            }\n            rgb[3] = 1;  // default alpha\n            return rgb;\n        }\n\n        // rgba(250,20,0,0.4)\n        if ((m = css.match(RE_RGBA))) {\n            var rgb$1 = m.slice(1,5);\n            for (var i$1=0; i$1<4; i$1++) {\n                rgb$1[i$1] = +rgb$1[i$1];\n            }\n            return rgb$1;\n        }\n\n        // rgb(100%,0%,0%)\n        if ((m = css.match(RE_RGB_PCT))) {\n            var rgb$2 = m.slice(1,4);\n            for (var i$2=0; i$2<3; i$2++) {\n                rgb$2[i$2] = round$2(rgb$2[i$2] * 2.55);\n            }\n            rgb$2[3] = 1;  // default alpha\n            return rgb$2;\n        }\n\n        // rgba(100%,0%,0%,0.4)\n        if ((m = css.match(RE_RGBA_PCT))) {\n            var rgb$3 = m.slice(1,5);\n            for (var i$3=0; i$3<3; i$3++) {\n                rgb$3[i$3] = round$2(rgb$3[i$3] * 2.55);\n            }\n            rgb$3[3] = +rgb$3[3];\n            return rgb$3;\n        }\n\n        // hsl(0,100%,50%)\n        if ((m = css.match(RE_HSL))) {\n            var hsl = m.slice(1,4);\n            hsl[1] *= 0.01;\n            hsl[2] *= 0.01;\n            var rgb$4 = hsl2rgb_1(hsl);\n            rgb$4[3] = 1;\n            return rgb$4;\n        }\n\n        // hsla(0,100%,50%,0.5)\n        if ((m = css.match(RE_HSLA))) {\n            var hsl$1 = m.slice(1,4);\n            hsl$1[1] *= 0.01;\n            hsl$1[2] *= 0.01;\n            var rgb$5 = hsl2rgb_1(hsl$1);\n            rgb$5[3] = +m[4];  // default alpha = 1\n            return rgb$5;\n        }\n    };\n\n    css2rgb.test = function (s) {\n        return RE_RGB.test(s) ||\n            RE_RGBA.test(s) ||\n            RE_RGB_PCT.test(s) ||\n            RE_RGBA_PCT.test(s) ||\n            RE_HSL.test(s) ||\n            RE_HSLA.test(s);\n    };\n\n    var css2rgb_1 = css2rgb;\n\n    var type$3 = utils.type;\n\n\n\n\n    Color_1.prototype.css = function(mode) {\n        return rgb2css_1(this._rgb, mode);\n    };\n\n    chroma_1.css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['css']) ));\n    };\n\n    input.format.css = css2rgb_1;\n\n    input.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$3(h) === 'string' && css2rgb_1.test(h)) {\n                return 'css';\n            }\n        }\n    });\n\n    var unpack$8 = utils.unpack;\n\n    input.format.gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack$8(args, 'rgba');\n        rgb[0] *= 255;\n        rgb[1] *= 255;\n        rgb[2] *= 255;\n        return rgb;\n    };\n\n    chroma_1.gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['gl']) ));\n    };\n\n    Color_1.prototype.gl = function() {\n        var rgb = this._rgb;\n        return [rgb[0]/255, rgb[1]/255, rgb[2]/255, rgb[3]];\n    };\n\n    var unpack$9 = utils.unpack;\n\n    var rgb2hcg = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$9(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n        var delta = max - min;\n        var c = delta * 100 / 255;\n        var _g = min / (255 - delta) * 100;\n        var h;\n        if (delta === 0) {\n            h = Number.NaN;\n        } else {\n            if (r === max) { h = (g - b) / delta; }\n            if (g === max) { h = 2+(b - r) / delta; }\n            if (b === max) { h = 4+(r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, c, _g];\n    };\n\n    var rgb2hcg_1 = rgb2hcg;\n\n    var unpack$a = utils.unpack;\n    var floor = Math.floor;\n\n    /*\n     * this is basically just HSV with some minor tweaks\n     *\n     * hue.. [0..360]\n     * chroma .. [0..1]\n     * grayness .. [0..1]\n     */\n\n    var hcg2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$a(args, 'hcg');\n        var h = args[0];\n        var c = args[1];\n        var _g = args[2];\n        var r,g,b;\n        _g = _g * 255;\n        var _c = c * 255;\n        if (c === 0) {\n            r = g = b = _g;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n            var i = floor(h);\n            var f = h - i;\n            var p = _g * (1 - c);\n            var q = p + _c * (1 - f);\n            var t = p + _c * f;\n            var v = p + _c;\n            switch (i) {\n                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break\n                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break\n                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break\n                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break\n                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break\n                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break\n            }\n        }\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var hcg2rgb_1 = hcg2rgb;\n\n    var unpack$b = utils.unpack;\n    var type$4 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.hcg = function() {\n        return rgb2hcg_1(this._rgb);\n    };\n\n    chroma_1.hcg = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hcg']) ));\n    };\n\n    input.format.hcg = hcg2rgb_1;\n\n    input.autodetect.push({\n        p: 1,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$b(args, 'hcg');\n            if (type$4(args) === 'array' && args.length === 3) {\n                return 'hcg';\n            }\n        }\n    });\n\n    var unpack$c = utils.unpack;\n    var last$4 = utils.last;\n    var round$3 = Math.round;\n\n    var rgb2hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$c(args, 'rgba');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var a = ref[3];\n        var mode = last$4(args) || 'auto';\n        if (a === undefined) { a = 1; }\n        if (mode === 'auto') {\n            mode = a < 1 ? 'rgba' : 'rgb';\n        }\n        r = round$3(r);\n        g = round$3(g);\n        b = round$3(b);\n        var u = r << 16 | g << 8 | b;\n        var str = \"000000\" + u.toString(16); //#.toUpperCase();\n        str = str.substr(str.length - 6);\n        var hxa = '0' + round$3(a * 255).toString(16);\n        hxa = hxa.substr(hxa.length - 2);\n        switch (mode.toLowerCase()) {\n            case 'rgba': return (\"#\" + str + hxa);\n            case 'argb': return (\"#\" + hxa + str);\n            default: return (\"#\" + str);\n        }\n    };\n\n    var rgb2hex_1 = rgb2hex;\n\n    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n    var RE_HEXA = /^#?([A-Fa-f0-9]{8})$/;\n\n    var hex2rgb = function (hex) {\n        if (hex.match(RE_HEX)) {\n            // remove optional leading #\n            if (hex.length === 4 || hex.length === 7) {\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full six-digit\n            if (hex.length === 3) {\n                hex = hex.split('');\n                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\n            }\n            var u = parseInt(hex, 16);\n            var r = u >> 16;\n            var g = u >> 8 & 0xFF;\n            var b = u & 0xFF;\n            return [r,g,b,1];\n        }\n\n        // match rgba hex format, eg #FF000077\n        if (hex.match(RE_HEXA)) {\n            if (hex.length === 9) {\n                // remove optional leading #\n                hex = hex.substr(1);\n            }\n            var u$1 = parseInt(hex, 16);\n            var r$1 = u$1 >> 24 & 0xFF;\n            var g$1 = u$1 >> 16 & 0xFF;\n            var b$1 = u$1 >> 8 & 0xFF;\n            var a = Math.round((u$1 & 0xFF) / 0xFF * 100) / 100;\n            return [r$1,g$1,b$1,a];\n        }\n\n        // we used to check for css colors here\n        // if _input.css? and rgb = _input.css hex\n        //     return rgb\n\n        throw new Error((\"unknown hex color: \" + hex));\n    };\n\n    var hex2rgb_1 = hex2rgb;\n\n    var type$5 = utils.type;\n\n\n\n\n    Color_1.prototype.hex = function(mode) {\n        return rgb2hex_1(this._rgb, mode);\n    };\n\n    chroma_1.hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hex']) ));\n    };\n\n    input.format.hex = hex2rgb_1;\n    input.autodetect.push({\n        p: 4,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$5(h) === 'string' && [3,4,6,7,8,9].includes(h.length)) {\n                return 'hex';\n            }\n        }\n    });\n\n    var unpack$d = utils.unpack;\n    var TWOPI = utils.TWOPI;\n    var min = Math.min;\n    var sqrt = Math.sqrt;\n    var acos = Math.acos;\n\n    var rgb2hsi = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n        */\n        var ref = unpack$d(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var h;\n        var min_ = min(r,g,b);\n        var i = (r+g+b) / 3;\n        var s = i > 0 ? 1 - min_/i : 0;\n        if (s === 0) {\n            h = NaN;\n        } else {\n            h = ((r-g)+(r-b)) / 2;\n            h /= sqrt((r-g)*(r-g) + (r-b)*(g-b));\n            h = acos(h);\n            if (b > g) {\n                h = TWOPI - h;\n            }\n            h /= TWOPI;\n        }\n        return [h*360,s,i];\n    };\n\n    var rgb2hsi_1 = rgb2hsi;\n\n    var unpack$e = utils.unpack;\n    var limit$1 = utils.limit;\n    var TWOPI$1 = utils.TWOPI;\n    var PITHIRD = utils.PITHIRD;\n    var cos = Math.cos;\n\n    /*\n     * hue [0..360]\n     * saturation [0..1]\n     * intensity [0..1]\n     */\n    var hsi2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n        */\n        args = unpack$e(args, 'hsi');\n        var h = args[0];\n        var s = args[1];\n        var i = args[2];\n        var r,g,b;\n\n        if (isNaN(h)) { h = 0; }\n        if (isNaN(s)) { s = 0; }\n        // normalize hue\n        if (h > 360) { h -= 360; }\n        if (h < 0) { h += 360; }\n        h /= 360;\n        if (h < 1/3) {\n            b = (1-s)/3;\n            r = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\n            g = 1 - (b+r);\n        } else if (h < 2/3) {\n            h -= 1/3;\n            r = (1-s)/3;\n            g = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\n            b = 1 - (r+g);\n        } else {\n            h -= 2/3;\n            g = (1-s)/3;\n            b = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\n            r = 1 - (g+b);\n        }\n        r = limit$1(i*r*3);\n        g = limit$1(i*g*3);\n        b = limit$1(i*b*3);\n        return [r*255, g*255, b*255, args.length > 3 ? args[3] : 1];\n    };\n\n    var hsi2rgb_1 = hsi2rgb;\n\n    var unpack$f = utils.unpack;\n    var type$6 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.hsi = function() {\n        return rgb2hsi_1(this._rgb);\n    };\n\n    chroma_1.hsi = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsi']) ));\n    };\n\n    input.format.hsi = hsi2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$f(args, 'hsi');\n            if (type$6(args) === 'array' && args.length === 3) {\n                return 'hsi';\n            }\n        }\n    });\n\n    var unpack$g = utils.unpack;\n    var type$7 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.hsl = function() {\n        return rgb2hsl_1(this._rgb);\n    };\n\n    chroma_1.hsl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsl']) ));\n    };\n\n    input.format.hsl = hsl2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$g(args, 'hsl');\n            if (type$7(args) === 'array' && args.length === 3) {\n                return 'hsl';\n            }\n        }\n    });\n\n    var unpack$h = utils.unpack;\n    var min$1 = Math.min;\n    var max$1 = Math.max;\n\n    /*\n     * supported arguments:\n     * - rgb2hsv(r,g,b)\n     * - rgb2hsv([r,g,b])\n     * - rgb2hsv({r,g,b})\n     */\n    var rgb2hsl$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$h(args, 'rgb');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n        var min_ = min$1(r, g, b);\n        var max_ = max$1(r, g, b);\n        var delta = max_ - min_;\n        var h,s,v;\n        v = max_ / 255.0;\n        if (max_ === 0) {\n            h = Number.NaN;\n            s = 0;\n        } else {\n            s = delta / max_;\n            if (r === max_) { h = (g - b) / delta; }\n            if (g === max_) { h = 2+(b - r) / delta; }\n            if (b === max_) { h = 4+(r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, s, v]\n    };\n\n    var rgb2hsv = rgb2hsl$1;\n\n    var unpack$i = utils.unpack;\n    var floor$1 = Math.floor;\n\n    var hsv2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack$i(args, 'hsv');\n        var h = args[0];\n        var s = args[1];\n        var v = args[2];\n        var r,g,b;\n        v *= 255;\n        if (s === 0) {\n            r = g = b = v;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n\n            var i = floor$1(h);\n            var f = h - i;\n            var p = v * (1 - s);\n            var q = v * (1 - s * f);\n            var t = v * (1 - s * (1 - f));\n\n            switch (i) {\n                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break\n                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break\n                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break\n                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break\n                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break\n                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break\n            }\n        }\n        return [r,g,b,args.length > 3?args[3]:1];\n    };\n\n    var hsv2rgb_1 = hsv2rgb;\n\n    var unpack$j = utils.unpack;\n    var type$8 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.hsv = function() {\n        return rgb2hsv(this._rgb);\n    };\n\n    chroma_1.hsv = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsv']) ));\n    };\n\n    input.format.hsv = hsv2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$j(args, 'hsv');\n            if (type$8(args) === 'array' && args.length === 3) {\n                return 'hsv';\n            }\n        }\n    });\n\n    var labConstants = {\n        // Corresponds roughly to RGB brighter/darker\n        Kn: 18,\n\n        // D65 standard referent\n        Xn: 0.950470,\n        Yn: 1,\n        Zn: 1.088830,\n\n        t0: 0.137931034,  // 4 / 29\n        t1: 0.206896552,  // 6 / 29\n        t2: 0.12841855,   // 3 * t1 * t1\n        t3: 0.008856452,  // t1 * t1 * t1\n    };\n\n    var unpack$k = utils.unpack;\n    var pow = Math.pow;\n\n    var rgb2lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$k(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var ref$1 = rgb2xyz(r,g,b);\n        var x = ref$1[0];\n        var y = ref$1[1];\n        var z = ref$1[2];\n        var l = 116 * y - 16;\n        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];\n    };\n\n    var rgb_xyz = function (r) {\n        if ((r /= 255) <= 0.04045) { return r / 12.92; }\n        return pow((r + 0.055) / 1.055, 2.4);\n    };\n\n    var xyz_lab = function (t) {\n        if (t > labConstants.t3) { return pow(t, 1 / 3); }\n        return t / labConstants.t2 + labConstants.t0;\n    };\n\n    var rgb2xyz = function (r,g,b) {\n        r = rgb_xyz(r);\n        g = rgb_xyz(g);\n        b = rgb_xyz(b);\n        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / labConstants.Xn);\n        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / labConstants.Yn);\n        var z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / labConstants.Zn);\n        return [x,y,z];\n    };\n\n    var rgb2lab_1 = rgb2lab;\n\n    var unpack$l = utils.unpack;\n    var pow$1 = Math.pow;\n\n    /*\n     * L* [0..100]\n     * a [-100..100]\n     * b [-100..100]\n     */\n    var lab2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$l(args, 'lab');\n        var l = args[0];\n        var a = args[1];\n        var b = args[2];\n        var x,y,z, r,g,b_;\n\n        y = (l + 16) / 116;\n        x = isNaN(a) ? y : y + a / 500;\n        z = isNaN(b) ? y : y - b / 200;\n\n        y = labConstants.Yn * lab_xyz(y);\n        x = labConstants.Xn * lab_xyz(x);\n        z = labConstants.Zn * lab_xyz(z);\n\n        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);  // D65 -> sRGB\n        g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n\n        return [r,g,b_,args.length > 3 ? args[3] : 1];\n    };\n\n    var xyz_rgb = function (r) {\n        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow$1(r, 1 / 2.4) - 0.055)\n    };\n\n    var lab_xyz = function (t) {\n        return t > labConstants.t1 ? t * t * t : labConstants.t2 * (t - labConstants.t0)\n    };\n\n    var lab2rgb_1 = lab2rgb;\n\n    var unpack$m = utils.unpack;\n    var type$9 = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.lab = function() {\n        return rgb2lab_1(this._rgb);\n    };\n\n    chroma_1.lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['lab']) ));\n    };\n\n    input.format.lab = lab2rgb_1;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$m(args, 'lab');\n            if (type$9(args) === 'array' && args.length === 3) {\n                return 'lab';\n            }\n        }\n    });\n\n    var unpack$n = utils.unpack;\n    var RAD2DEG = utils.RAD2DEG;\n    var sqrt$1 = Math.sqrt;\n    var atan2 = Math.atan2;\n    var round$4 = Math.round;\n\n    var lab2lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$n(args, 'lab');\n        var l = ref[0];\n        var a = ref[1];\n        var b = ref[2];\n        var c = sqrt$1(a * a + b * b);\n        var h = (atan2(b, a) * RAD2DEG + 360) % 360;\n        if (round$4(c*10000) === 0) { h = Number.NaN; }\n        return [l, c, h];\n    };\n\n    var lab2lch_1 = lab2lch;\n\n    var unpack$o = utils.unpack;\n\n\n\n    var rgb2lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$o(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var ref$1 = rgb2lab_1(r,g,b);\n        var l = ref$1[0];\n        var a = ref$1[1];\n        var b_ = ref$1[2];\n        return lab2lch_1(l,a,b_);\n    };\n\n    var rgb2lch_1 = rgb2lch;\n\n    var unpack$p = utils.unpack;\n    var DEG2RAD = utils.DEG2RAD;\n    var sin = Math.sin;\n    var cos$1 = Math.cos;\n\n    var lch2lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n        These formulas were invented by David Dalrymple to obtain maximum contrast without going\n        out of gamut if the parameters are in the range 0-1.\n\n        A saturation multiplier was added by Gregor Aisch\n        */\n        var ref = unpack$p(args, 'lch');\n        var l = ref[0];\n        var c = ref[1];\n        var h = ref[2];\n        if (isNaN(h)) { h = 0; }\n        h = h * DEG2RAD;\n        return [l, cos$1(h) * c, sin(h) * c]\n    };\n\n    var lch2lab_1 = lch2lab;\n\n    var unpack$q = utils.unpack;\n\n\n\n    var lch2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack$q(args, 'lch');\n        var l = args[0];\n        var c = args[1];\n        var h = args[2];\n        var ref = lch2lab_1 (l,c,h);\n        var L = ref[0];\n        var a = ref[1];\n        var b_ = ref[2];\n        var ref$1 = lab2rgb_1 (L,a,b_);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b = ref$1[2];\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var lch2rgb_1 = lch2rgb;\n\n    var unpack$r = utils.unpack;\n\n\n    var hcl2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hcl = unpack$r(args, 'hcl').reverse();\n        return lch2rgb_1.apply(void 0, hcl);\n    };\n\n    var hcl2rgb_1 = hcl2rgb;\n\n    var unpack$s = utils.unpack;\n    var type$a = utils.type;\n\n\n\n\n\n\n    Color_1.prototype.lch = function() { return rgb2lch_1(this._rgb); };\n    Color_1.prototype.hcl = function() { return rgb2lch_1(this._rgb).reverse(); };\n\n    chroma_1.lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['lch']) ));\n    };\n    chroma_1.hcl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hcl']) ));\n    };\n\n    input.format.lch = lch2rgb_1;\n    input.format.hcl = hcl2rgb_1;\n\n    ['lch','hcl'].forEach(function (m) { return input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$s(args, m);\n            if (type$a(args) === 'array' && args.length === 3) {\n                return m;\n            }\n        }\n    }); });\n\n    /**\n    \tX11 color names\n\n    \thttp://www.w3.org/TR/css3-color/#svg-color\n    */\n\n    var w3cx11 = {\n        aliceblue: '#f0f8ff',\n        antiquewhite: '#faebd7',\n        aqua: '#00ffff',\n        aquamarine: '#7fffd4',\n        azure: '#f0ffff',\n        beige: '#f5f5dc',\n        bisque: '#ffe4c4',\n        black: '#000000',\n        blanchedalmond: '#ffebcd',\n        blue: '#0000ff',\n        blueviolet: '#8a2be2',\n        brown: '#a52a2a',\n        burlywood: '#deb887',\n        cadetblue: '#5f9ea0',\n        chartreuse: '#7fff00',\n        chocolate: '#d2691e',\n        coral: '#ff7f50',\n        cornflower: '#6495ed',\n        cornflowerblue: '#6495ed',\n        cornsilk: '#fff8dc',\n        crimson: '#dc143c',\n        cyan: '#00ffff',\n        darkblue: '#00008b',\n        darkcyan: '#008b8b',\n        darkgoldenrod: '#b8860b',\n        darkgray: '#a9a9a9',\n        darkgreen: '#006400',\n        darkgrey: '#a9a9a9',\n        darkkhaki: '#bdb76b',\n        darkmagenta: '#8b008b',\n        darkolivegreen: '#556b2f',\n        darkorange: '#ff8c00',\n        darkorchid: '#9932cc',\n        darkred: '#8b0000',\n        darksalmon: '#e9967a',\n        darkseagreen: '#8fbc8f',\n        darkslateblue: '#483d8b',\n        darkslategray: '#2f4f4f',\n        darkslategrey: '#2f4f4f',\n        darkturquoise: '#00ced1',\n        darkviolet: '#9400d3',\n        deeppink: '#ff1493',\n        deepskyblue: '#00bfff',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1e90ff',\n        firebrick: '#b22222',\n        floralwhite: '#fffaf0',\n        forestgreen: '#228b22',\n        fuchsia: '#ff00ff',\n        gainsboro: '#dcdcdc',\n        ghostwhite: '#f8f8ff',\n        gold: '#ffd700',\n        goldenrod: '#daa520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#adff2f',\n        grey: '#808080',\n        honeydew: '#f0fff0',\n        hotpink: '#ff69b4',\n        indianred: '#cd5c5c',\n        indigo: '#4b0082',\n        ivory: '#fffff0',\n        khaki: '#f0e68c',\n        laserlemon: '#ffff54',\n        lavender: '#e6e6fa',\n        lavenderblush: '#fff0f5',\n        lawngreen: '#7cfc00',\n        lemonchiffon: '#fffacd',\n        lightblue: '#add8e6',\n        lightcoral: '#f08080',\n        lightcyan: '#e0ffff',\n        lightgoldenrod: '#fafad2',\n        lightgoldenrodyellow: '#fafad2',\n        lightgray: '#d3d3d3',\n        lightgreen: '#90ee90',\n        lightgrey: '#d3d3d3',\n        lightpink: '#ffb6c1',\n        lightsalmon: '#ffa07a',\n        lightseagreen: '#20b2aa',\n        lightskyblue: '#87cefa',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#b0c4de',\n        lightyellow: '#ffffe0',\n        lime: '#00ff00',\n        limegreen: '#32cd32',\n        linen: '#faf0e6',\n        magenta: '#ff00ff',\n        maroon: '#800000',\n        maroon2: '#7f0000',\n        maroon3: '#b03060',\n        mediumaquamarine: '#66cdaa',\n        mediumblue: '#0000cd',\n        mediumorchid: '#ba55d3',\n        mediumpurple: '#9370db',\n        mediumseagreen: '#3cb371',\n        mediumslateblue: '#7b68ee',\n        mediumspringgreen: '#00fa9a',\n        mediumturquoise: '#48d1cc',\n        mediumvioletred: '#c71585',\n        midnightblue: '#191970',\n        mintcream: '#f5fffa',\n        mistyrose: '#ffe4e1',\n        moccasin: '#ffe4b5',\n        navajowhite: '#ffdead',\n        navy: '#000080',\n        oldlace: '#fdf5e6',\n        olive: '#808000',\n        olivedrab: '#6b8e23',\n        orange: '#ffa500',\n        orangered: '#ff4500',\n        orchid: '#da70d6',\n        palegoldenrod: '#eee8aa',\n        palegreen: '#98fb98',\n        paleturquoise: '#afeeee',\n        palevioletred: '#db7093',\n        papayawhip: '#ffefd5',\n        peachpuff: '#ffdab9',\n        peru: '#cd853f',\n        pink: '#ffc0cb',\n        plum: '#dda0dd',\n        powderblue: '#b0e0e6',\n        purple: '#800080',\n        purple2: '#7f007f',\n        purple3: '#a020f0',\n        rebeccapurple: '#663399',\n        red: '#ff0000',\n        rosybrown: '#bc8f8f',\n        royalblue: '#4169e1',\n        saddlebrown: '#8b4513',\n        salmon: '#fa8072',\n        sandybrown: '#f4a460',\n        seagreen: '#2e8b57',\n        seashell: '#fff5ee',\n        sienna: '#a0522d',\n        silver: '#c0c0c0',\n        skyblue: '#87ceeb',\n        slateblue: '#6a5acd',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#fffafa',\n        springgreen: '#00ff7f',\n        steelblue: '#4682b4',\n        tan: '#d2b48c',\n        teal: '#008080',\n        thistle: '#d8bfd8',\n        tomato: '#ff6347',\n        turquoise: '#40e0d0',\n        violet: '#ee82ee',\n        wheat: '#f5deb3',\n        white: '#ffffff',\n        whitesmoke: '#f5f5f5',\n        yellow: '#ffff00',\n        yellowgreen: '#9acd32'\n    };\n\n    var w3cx11_1 = w3cx11;\n\n    var type$b = utils.type;\n\n\n\n\n\n    Color_1.prototype.name = function() {\n        var hex = rgb2hex_1(this._rgb, 'rgb');\n        for (var i = 0, list = Object.keys(w3cx11_1); i < list.length; i += 1) {\n            var n = list[i];\n\n            if (w3cx11_1[n] === hex) { return n.toLowerCase(); }\n        }\n        return hex;\n    };\n\n    input.format.named = function (name) {\n        name = name.toLowerCase();\n        if (w3cx11_1[name]) { return hex2rgb_1(w3cx11_1[name]); }\n        throw new Error('unknown color name: '+name);\n    };\n\n    input.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type$b(h) === 'string' && w3cx11_1[h.toLowerCase()]) {\n                return 'named';\n            }\n        }\n    });\n\n    var unpack$t = utils.unpack;\n\n    var rgb2num = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack$t(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        return (r << 16) + (g << 8) + b;\n    };\n\n    var rgb2num_1 = rgb2num;\n\n    var type$c = utils.type;\n\n    var num2rgb = function (num) {\n        if (type$c(num) == \"number\" && num >= 0 && num <= 0xFFFFFF) {\n            var r = num >> 16;\n            var g = (num >> 8) & 0xFF;\n            var b = num & 0xFF;\n            return [r,g,b,1];\n        }\n        throw new Error(\"unknown num color: \"+num);\n    };\n\n    var num2rgb_1 = num2rgb;\n\n    var type$d = utils.type;\n\n\n\n    Color_1.prototype.num = function() {\n        return rgb2num_1(this._rgb);\n    };\n\n    chroma_1.num = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['num']) ));\n    };\n\n    input.format.num = num2rgb_1;\n\n    input.autodetect.push({\n        p: 5,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            if (args.length === 1 && type$d(args[0]) === 'number' && args[0] >= 0 && args[0] <= 0xFFFFFF) {\n                return 'num';\n            }\n        }\n    });\n\n    var unpack$u = utils.unpack;\n    var type$e = utils.type;\n    var round$5 = Math.round;\n\n    Color_1.prototype.rgb = function(rnd) {\n        if ( rnd === void 0 ) rnd=true;\n\n        if (rnd === false) { return this._rgb.slice(0,3); }\n        return this._rgb.slice(0,3).map(round$5);\n    };\n\n    Color_1.prototype.rgba = function(rnd) {\n        if ( rnd === void 0 ) rnd=true;\n\n        return this._rgb.slice(0,4).map(function (v,i) {\n            return i<3 ? (rnd === false ? v : round$5(v)) : v;\n        });\n    };\n\n    chroma_1.rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['rgb']) ));\n    };\n\n    input.format.rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack$u(args, 'rgba');\n        if (rgba[3] === undefined) { rgba[3] = 1; }\n        return rgba;\n    };\n\n    input.autodetect.push({\n        p: 3,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack$u(args, 'rgba');\n            if (type$e(args) === 'array' && (args.length === 3 ||\n                args.length === 4 && type$e(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) {\n                return 'rgb';\n            }\n        }\n    });\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     */\n\n    var log = Math.log;\n\n    var temperature2rgb = function (kelvin) {\n        var temp = kelvin / 100;\n        var r,g,b;\n        if (temp < 66) {\n            r = 255;\n            g = -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log(g);\n            b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log(b);\n        } else {\n            r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log(r);\n            g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log(g);\n            b = 255;\n        }\n        return [r,g,b,1];\n    };\n\n    var temperature2rgb_1 = temperature2rgb;\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     **/\n\n\n    var unpack$v = utils.unpack;\n    var round$6 = Math.round;\n\n    var rgb2temperature = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack$v(args, 'rgb');\n        var r = rgb[0], b = rgb[2];\n        var minTemp = 1000;\n        var maxTemp = 40000;\n        var eps = 0.4;\n        var temp;\n        while (maxTemp - minTemp > eps) {\n            temp = (maxTemp + minTemp) * 0.5;\n            var rgb$1 = temperature2rgb_1(temp);\n            if ((rgb$1[2] / rgb$1[0]) >= (b / r)) {\n                maxTemp = temp;\n            } else {\n                minTemp = temp;\n            }\n        }\n        return round$6(temp);\n    };\n\n    var rgb2temperature_1 = rgb2temperature;\n\n    Color_1.prototype.temp =\n    Color_1.prototype.kelvin =\n    Color_1.prototype.temperature = function() {\n        return rgb2temperature_1(this._rgb);\n    };\n\n    chroma_1.temp =\n    chroma_1.kelvin =\n    chroma_1.temperature = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['temp']) ));\n    };\n\n    input.format.temp =\n    input.format.kelvin =\n    input.format.temperature = temperature2rgb_1;\n\n    var type$f = utils.type;\n\n    Color_1.prototype.alpha = function(a, mutate) {\n        if ( mutate === void 0 ) mutate=false;\n\n        if (a !== undefined && type$f(a) === 'number') {\n            if (mutate) {\n                this._rgb[3] = a;\n                return this;\n            }\n            return new Color_1([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n        }\n        return this._rgb[3];\n    };\n\n    Color_1.prototype.clipped = function() {\n        return this._rgb._clipped || false;\n    };\n\n    Color_1.prototype.darken = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \tvar me = this;\n    \tvar lab = me.lab();\n    \tlab[0] -= labConstants.Kn * amount;\n    \treturn new Color_1(lab, 'lab').alpha(me.alpha(), true);\n    };\n\n    Color_1.prototype.brighten = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \treturn this.darken(-amount);\n    };\n\n    Color_1.prototype.darker = Color_1.prototype.darken;\n    Color_1.prototype.brighter = Color_1.prototype.brighten;\n\n    Color_1.prototype.get = function(mc) {\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel);\n            if (i > -1) { return src[i]; }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    var type$g = utils.type;\n    var pow$2 = Math.pow;\n\n    var EPS = 1e-7;\n    var MAX_ITER = 20;\n\n    Color_1.prototype.luminance = function(lum) {\n        if (lum !== undefined && type$g(lum) === 'number') {\n            if (lum === 0) {\n                // return pure black\n                return new Color_1([0,0,0,this._rgb[3]], 'rgb');\n            }\n            if (lum === 1) {\n                // return pure white\n                return new Color_1([255,255,255,this._rgb[3]], 'rgb');\n            }\n            // compute new color using...\n            var cur_lum = this.luminance();\n            var mode = 'rgb';\n            var max_iter = MAX_ITER;\n\n            var test = function (low, high) {\n                var mid = low.interpolate(high, 0.5, mode);\n                var lm = mid.luminance();\n                if (Math.abs(lum - lm) < EPS || !max_iter--) {\n                    // close enough\n                    return mid;\n                }\n                return lm > lum ? test(low, mid) : test(mid, high);\n            };\n\n            var rgb = (cur_lum > lum ? test(new Color_1([0,0,0]), this) : test(this, new Color_1([255,255,255]))).rgb();\n            return new Color_1(rgb.concat( [this._rgb[3]]));\n        }\n        return rgb2luminance.apply(void 0, (this._rgb).slice(0,3));\n    };\n\n\n    var rgb2luminance = function (r,g,b) {\n        // relative luminance\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        r = luminance_x(r);\n        g = luminance_x(g);\n        b = luminance_x(b);\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    };\n\n    var luminance_x = function (x) {\n        x /= 255;\n        return x <= 0.03928 ? x/12.92 : pow$2((x+0.055)/1.055, 2.4);\n    };\n\n    var interpolator = {};\n\n    var type$h = utils.type;\n\n\n    var mix = function (col1, col2, f) {\n        if ( f === void 0 ) f=0.5;\n        var rest = [], len = arguments.length - 3;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];\n\n        var mode = rest[0] || 'lrgb';\n        if (!interpolator[mode] && !rest.length) {\n            // fall back to the first supported mode\n            mode = Object.keys(interpolator)[0];\n        }\n        if (!interpolator[mode]) {\n            throw new Error((\"interpolation mode \" + mode + \" is not defined\"));\n        }\n        if (type$h(col1) !== 'object') { col1 = new Color_1(col1); }\n        if (type$h(col2) !== 'object') { col2 = new Color_1(col2); }\n        return interpolator[mode](col1, col2, f)\n            .alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n    };\n\n    Color_1.prototype.mix =\n    Color_1.prototype.interpolate = function(col2, f) {\n    \tif ( f === void 0 ) f=0.5;\n    \tvar rest = [], len = arguments.length - 2;\n    \twhile ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];\n\n    \treturn mix.apply(void 0, [ this, col2, f ].concat( rest ));\n    };\n\n    Color_1.prototype.premultiply = function(mutate) {\n    \tif ( mutate === void 0 ) mutate=false;\n\n    \tvar rgb = this._rgb;\n    \tvar a = rgb[3];\n    \tif (mutate) {\n    \t\tthis._rgb = [rgb[0]*a, rgb[1]*a, rgb[2]*a, a];\n    \t\treturn this;\n    \t} else {\n    \t\treturn new Color_1([rgb[0]*a, rgb[1]*a, rgb[2]*a, a], 'rgb');\n    \t}\n    };\n\n    Color_1.prototype.saturate = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \tvar me = this;\n    \tvar lch = me.lch();\n    \tlch[1] += labConstants.Kn * amount;\n    \tif (lch[1] < 0) { lch[1] = 0; }\n    \treturn new Color_1(lch, 'lch').alpha(me.alpha(), true);\n    };\n\n    Color_1.prototype.desaturate = function(amount) {\n    \tif ( amount === void 0 ) amount=1;\n\n    \treturn this.saturate(-amount);\n    };\n\n    var type$i = utils.type;\n\n    Color_1.prototype.set = function(mc, value, mutate) {\n        if ( mutate === void 0 ) mutate=false;\n\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel);\n            if (i > -1) {\n                if (type$i(value) == 'string') {\n                    switch(value.charAt(0)) {\n                        case '+': src[i] += +value; break;\n                        case '-': src[i] += +value; break;\n                        case '*': src[i] *= +(value.substr(1)); break;\n                        case '/': src[i] /= +(value.substr(1)); break;\n                        default: src[i] = +value;\n                    }\n                } else if (type$i(value) === 'number') {\n                    src[i] = value;\n                } else {\n                    throw new Error(\"unsupported value for Color.set\");\n                }\n                var out = new Color_1(src, mode);\n                if (mutate) {\n                    this._rgb = out._rgb;\n                    return this;\n                }\n                return out;\n            }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    var rgb$1 = function (col1, col2, f) {\n        var xyz0 = col1._rgb;\n        var xyz1 = col2._rgb;\n        return new Color_1(\n            xyz0[0] + f * (xyz1[0]-xyz0[0]),\n            xyz0[1] + f * (xyz1[1]-xyz0[1]),\n            xyz0[2] + f * (xyz1[2]-xyz0[2]),\n            'rgb'\n        )\n    };\n\n    // register interpolator\n    interpolator.rgb = rgb$1;\n\n    var sqrt$2 = Math.sqrt;\n    var pow$3 = Math.pow;\n\n    var lrgb = function (col1, col2, f) {\n        var ref = col1._rgb;\n        var x1 = ref[0];\n        var y1 = ref[1];\n        var z1 = ref[2];\n        var ref$1 = col2._rgb;\n        var x2 = ref$1[0];\n        var y2 = ref$1[1];\n        var z2 = ref$1[2];\n        return new Color_1(\n            sqrt$2(pow$3(x1,2) * (1-f) + pow$3(x2,2) * f),\n            sqrt$2(pow$3(y1,2) * (1-f) + pow$3(y2,2) * f),\n            sqrt$2(pow$3(z1,2) * (1-f) + pow$3(z2,2) * f),\n            'rgb'\n        )\n    };\n\n    // register interpolator\n    interpolator.lrgb = lrgb;\n\n    var lab$1 = function (col1, col2, f) {\n        var xyz0 = col1.lab();\n        var xyz1 = col2.lab();\n        return new Color_1(\n            xyz0[0] + f * (xyz1[0]-xyz0[0]),\n            xyz0[1] + f * (xyz1[1]-xyz0[1]),\n            xyz0[2] + f * (xyz1[2]-xyz0[2]),\n            'lab'\n        )\n    };\n\n    // register interpolator\n    interpolator.lab = lab$1;\n\n    var _hsx = function (col1, col2, f, m) {\n        var assign, assign$1;\n\n        var xyz0, xyz1;\n        if (m === 'hsl') {\n            xyz0 = col1.hsl();\n            xyz1 = col2.hsl();\n        } else if (m === 'hsv') {\n            xyz0 = col1.hsv();\n            xyz1 = col2.hsv();\n        } else if (m === 'hcg') {\n            xyz0 = col1.hcg();\n            xyz1 = col2.hcg();\n        } else if (m === 'hsi') {\n            xyz0 = col1.hsi();\n            xyz1 = col2.hsi();\n        } else if (m === 'lch' || m === 'hcl') {\n            m = 'hcl';\n            xyz0 = col1.hcl();\n            xyz1 = col2.hcl();\n        }\n\n        var hue0, hue1, sat0, sat1, lbv0, lbv1;\n        if (m.substr(0, 1) === 'h') {\n            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);\n            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);\n        }\n\n        var sat, hue, lbv, dh;\n\n        if (!isNaN(hue0) && !isNaN(hue1)) {\n            // both colors have hue\n            if (hue1 > hue0 && hue1 - hue0 > 180) {\n                dh = hue1-(hue0+360);\n            } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n                dh = hue1+360-hue0;\n            } else{\n                dh = hue1 - hue0;\n            }\n            hue = hue0 + f * dh;\n        } else if (!isNaN(hue0)) {\n            hue = hue0;\n            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }\n        } else if (!isNaN(hue1)) {\n            hue = hue1;\n            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }\n        } else {\n            hue = Number.NaN;\n        }\n\n        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }\n        lbv = lbv0 + f * (lbv1-lbv0);\n        return new Color_1([hue, sat, lbv], m);\n    };\n\n    var lch$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'lch');\n    };\n\n    // register interpolator\n    interpolator.lch = lch$1;\n    interpolator.hcl = lch$1;\n\n    var num$1 = function (col1, col2, f) {\n        var c1 = col1.num();\n        var c2 = col2.num();\n        return new Color_1(c1 + f * (c2-c1), 'num')\n    };\n\n    // register interpolator\n    interpolator.num = num$1;\n\n    var hcg$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'hcg');\n    };\n\n    // register interpolator\n    interpolator.hcg = hcg$1;\n\n    var hsi$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'hsi');\n    };\n\n    // register interpolator\n    interpolator.hsi = hsi$1;\n\n    var hsl$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'hsl');\n    };\n\n    // register interpolator\n    interpolator.hsl = hsl$1;\n\n    var hsv$1 = function (col1, col2, f) {\n    \treturn _hsx(col1, col2, f, 'hsv');\n    };\n\n    // register interpolator\n    interpolator.hsv = hsv$1;\n\n    var clip_rgb$2 = utils.clip_rgb;\n    var pow$4 = Math.pow;\n    var sqrt$3 = Math.sqrt;\n    var PI$1 = Math.PI;\n    var cos$2 = Math.cos;\n    var sin$1 = Math.sin;\n    var atan2$1 = Math.atan2;\n\n    var average = function (colors, mode) {\n        if ( mode === void 0 ) mode='lrgb';\n\n        var l = colors.length;\n        // convert colors to Color objects\n        colors = colors.map(function (c) { return new Color_1(c); });\n        if (mode === 'lrgb') {\n            return _average_lrgb(colors)\n        }\n        var first = colors.shift();\n        var xyz = first.get(mode);\n        var cnt = [];\n        var dx = 0;\n        var dy = 0;\n        // initial color\n        for (var i=0; i<xyz.length; i++) {\n            xyz[i] = xyz[i] || 0;\n            cnt.push(isNaN(xyz[i]) ? 0 : 1);\n            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n                var A = xyz[i] / 180 * PI$1;\n                dx += cos$2(A);\n                dy += sin$1(A);\n            }\n        }\n\n        var alpha = first.alpha();\n        colors.forEach(function (c) {\n            var xyz2 = c.get(mode);\n            alpha += c.alpha();\n            for (var i=0; i<xyz.length; i++) {\n                if (!isNaN(xyz2[i])) {\n                    cnt[i]++;\n                    if (mode.charAt(i) === 'h') {\n                        var A = xyz2[i] / 180 * PI$1;\n                        dx += cos$2(A);\n                        dy += sin$1(A);\n                    } else {\n                        xyz[i] += xyz2[i];\n                    }\n                }\n            }\n        });\n\n        for (var i$1=0; i$1<xyz.length; i$1++) {\n            if (mode.charAt(i$1) === 'h') {\n                var A$1 = atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1 * 180;\n                while (A$1 < 0) { A$1 += 360; }\n                while (A$1 >= 360) { A$1 -= 360; }\n                xyz[i$1] = A$1;\n            } else {\n                xyz[i$1] = xyz[i$1]/cnt[i$1];\n            }\n        }\n        alpha /= l;\n        return (new Color_1(xyz, mode)).alpha(alpha > 0.99999 ? 1 : alpha, true);\n    };\n\n\n    var _average_lrgb = function (colors) {\n        var l = colors.length;\n        var f = 1/l;\n        var xyz = [0,0,0,0];\n        for (var i = 0, list = colors; i < list.length; i += 1) {\n            var col = list[i];\n\n            var rgb = col._rgb;\n            xyz[0] += pow$4(rgb[0],2) * f;\n            xyz[1] += pow$4(rgb[1],2) * f;\n            xyz[2] += pow$4(rgb[2],2) * f;\n            xyz[3] += rgb[3] * f;\n        }\n        xyz[0] = sqrt$3(xyz[0]);\n        xyz[1] = sqrt$3(xyz[1]);\n        xyz[2] = sqrt$3(xyz[2]);\n        if (xyz[3] > 0.9999999) { xyz[3] = 1; }\n        return new Color_1(clip_rgb$2(xyz));\n    };\n\n    // minimal multi-purpose interface\n\n    // @requires utils color analyze\n\n\n    var type$j = utils.type;\n\n    var pow$5 = Math.pow;\n\n    var scale = function(colors) {\n\n        // constructor\n        var _mode = 'rgb';\n        var _nacol = chroma_1('#ccc');\n        var _spread = 0;\n        // const _fixed = false;\n        var _domain = [0, 1];\n        var _pos = [];\n        var _padding = [0,0];\n        var _classes = false;\n        var _colors = [];\n        var _out = false;\n        var _min = 0;\n        var _max = 1;\n        var _correctLightness = false;\n        var _colorCache = {};\n        var _useCache = true;\n        var _gamma = 1;\n\n        // private methods\n\n        var setColors = function(colors) {\n            colors = colors || ['#fff', '#000'];\n            if (colors && type$j(colors) === 'string' && chroma_1.brewer &&\n                chroma_1.brewer[colors.toLowerCase()]) {\n                colors = chroma_1.brewer[colors.toLowerCase()];\n            }\n            if (type$j(colors) === 'array') {\n                // handle single color\n                if (colors.length === 1) {\n                    colors = [colors[0], colors[0]];\n                }\n                // make a copy of the colors\n                colors = colors.slice(0);\n                // convert to chroma classes\n                for (var c=0; c<colors.length; c++) {\n                    colors[c] = chroma_1(colors[c]);\n                }\n                // auto-fill color position\n                _pos.length = 0;\n                for (var c$1=0; c$1<colors.length; c$1++) {\n                    _pos.push(c$1/(colors.length-1));\n                }\n            }\n            resetCache();\n            return _colors = colors;\n        };\n\n        var getClass = function(value) {\n            if (_classes != null) {\n                var n = _classes.length-1;\n                var i = 0;\n                while (i < n && value >= _classes[i]) {\n                    i++;\n                }\n                return i-1;\n            }\n            return 0;\n        };\n\n        var tmap = function (t) { return t; };\n\n        // const classifyValue = function(value) {\n        //     let val = value;\n        //     if (_classes.length > 2) {\n        //         const n = _classes.length-1;\n        //         const i = getClass(value);\n        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n        //     }\n        //     return val;\n        // };\n\n        var getColor = function(val, bypassMap) {\n            var col, t;\n            if (bypassMap == null) { bypassMap = false; }\n            if (isNaN(val) || (val === null)) { return _nacol; }\n            if (!bypassMap) {\n                if (_classes && (_classes.length > 2)) {\n                    // find the class\n                    var c = getClass(val);\n                    t = c / (_classes.length-2);\n                } else if (_max !== _min) {\n                    // just interpolate between min/max\n                    t = (val - _min) / (_max - _min);\n                } else {\n                    t = 1;\n                }\n            } else {\n                t = val;\n            }\n\n            if (!bypassMap) {\n                t = tmap(t);  // lightness correction\n            }\n\n            if (_gamma !== 1) { t = pow$5(t, _gamma); }\n\n            t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n\n            t = Math.min(1, Math.max(0, t));\n\n            var k = Math.floor(t * 10000);\n\n            if (_useCache && _colorCache[k]) {\n                col = _colorCache[k];\n            } else {\n                if (type$j(_colors) === 'array') {\n                    //for i in [0.._pos.length-1]\n                    for (var i=0; i<_pos.length; i++) {\n                        var p = _pos[i];\n                        if (t <= p) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if ((t >= p) && (i === (_pos.length-1))) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if (t > p && t < _pos[i+1]) {\n                            t = (t-p)/(_pos[i+1]-p);\n                            col = chroma_1.interpolate(_colors[i], _colors[i+1], t, _mode);\n                            break;\n                        }\n                    }\n                } else if (type$j(_colors) === 'function') {\n                    col = _colors(t);\n                }\n                if (_useCache) { _colorCache[k] = col; }\n            }\n            return col;\n        };\n\n        var resetCache = function () { return _colorCache = {}; };\n\n        setColors(colors);\n\n        // public interface\n\n        var f = function(v) {\n            var c = chroma_1(getColor(v));\n            if (_out && c[_out]) { return c[_out](); } else { return c; }\n        };\n\n        f.classes = function(classes) {\n            if (classes != null) {\n                if (type$j(classes) === 'array') {\n                    _classes = classes;\n                    _domain = [classes[0], classes[classes.length-1]];\n                } else {\n                    var d = chroma_1.analyze(_domain);\n                    if (classes === 0) {\n                        _classes = [d.min, d.max];\n                    } else {\n                        _classes = chroma_1.limits(d, 'e', classes);\n                    }\n                }\n                return f;\n            }\n            return _classes;\n        };\n\n\n        f.domain = function(domain) {\n            if (!arguments.length) {\n                return _domain;\n            }\n            _min = domain[0];\n            _max = domain[domain.length-1];\n            _pos = [];\n            var k = _colors.length;\n            if ((domain.length === k) && (_min !== _max)) {\n                // update positions\n                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {\n                    var d = list[i];\n\n                  _pos.push((d-_min) / (_max-_min));\n                }\n            } else {\n                for (var c=0; c<k; c++) {\n                    _pos.push(c/(k-1));\n                }\n            }\n            _domain = [_min, _max];\n            return f;\n        };\n\n        f.mode = function(_m) {\n            if (!arguments.length) {\n                return _mode;\n            }\n            _mode = _m;\n            resetCache();\n            return f;\n        };\n\n        f.range = function(colors, _pos) {\n            setColors(colors, _pos);\n            return f;\n        };\n\n        f.out = function(_o) {\n            _out = _o;\n            return f;\n        };\n\n        f.spread = function(val) {\n            if (!arguments.length) {\n                return _spread;\n            }\n            _spread = val;\n            return f;\n        };\n\n        f.correctLightness = function(v) {\n            if (v == null) { v = true; }\n            _correctLightness = v;\n            resetCache();\n            if (_correctLightness) {\n                tmap = function(t) {\n                    var L0 = getColor(0, true).lab()[0];\n                    var L1 = getColor(1, true).lab()[0];\n                    var pol = L0 > L1;\n                    var L_actual = getColor(t, true).lab()[0];\n                    var L_ideal = L0 + ((L1 - L0) * t);\n                    var L_diff = L_actual - L_ideal;\n                    var t0 = 0;\n                    var t1 = 1;\n                    var max_iter = 20;\n                    while ((Math.abs(L_diff) > 1e-2) && (max_iter-- > 0)) {\n                        (function() {\n                            if (pol) { L_diff *= -1; }\n                            if (L_diff < 0) {\n                                t0 = t;\n                                t += (t1 - t) * 0.5;\n                            } else {\n                                t1 = t;\n                                t += (t0 - t) * 0.5;\n                            }\n                            L_actual = getColor(t, true).lab()[0];\n                            return L_diff = L_actual - L_ideal;\n                        })();\n                    }\n                    return t;\n                };\n            } else {\n                tmap = function (t) { return t; };\n            }\n            return f;\n        };\n\n        f.padding = function(p) {\n            if (p != null) {\n                if (type$j(p) === 'number') {\n                    p = [p,p];\n                }\n                _padding = p;\n                return f;\n            } else {\n                return _padding;\n            }\n        };\n\n        f.colors = function(numColors, out) {\n            // If no arguments are given, return the original colors that were provided\n            if (arguments.length < 2) { out = 'hex'; }\n            var result = [];\n\n            if (arguments.length === 0) {\n                result = _colors.slice(0);\n\n            } else if (numColors === 1) {\n                result = [f(0.5)];\n\n            } else if (numColors > 1) {\n                var dm = _domain[0];\n                var dd = _domain[1] - dm;\n                result = __range__(0, numColors, false).map(function (i) { return f( dm + ((i/(numColors-1)) * dd) ); });\n\n            } else { // returns all colors based on the defined classes\n                colors = [];\n                var samples = [];\n                if (_classes && (_classes.length > 2)) {\n                    for (var i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n                        samples.push((_classes[i-1]+_classes[i])*0.5);\n                    }\n                } else {\n                    samples = _domain;\n                }\n                result = samples.map(function (v) { return f(v); });\n            }\n\n            if (chroma_1[out]) {\n                result = result.map(function (c) { return c[out](); });\n            }\n            return result;\n        };\n\n        f.cache = function(c) {\n            if (c != null) {\n                _useCache = c;\n                return f;\n            } else {\n                return _useCache;\n            }\n        };\n\n        f.gamma = function(g) {\n            if (g != null) {\n                _gamma = g;\n                return f;\n            } else {\n                return _gamma;\n            }\n        };\n\n        f.nodata = function(d) {\n            if (d != null) {\n                _nacol = chroma_1(d);\n                return f;\n            } else {\n                return _nacol;\n            }\n        };\n\n        return f;\n    };\n\n    function __range__(left, right, inclusive) {\n      var range = [];\n      var ascending = left < right;\n      var end = !inclusive ? right : ascending ? right + 1 : right - 1;\n      for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n        range.push(i);\n      }\n      return range;\n    }\n\n    //\n    // interpolates between a set of colors uzing a bezier spline\n    //\n\n    // @requires utils lab\n\n\n\n\n    var bezier = function(colors) {\n        var assign, assign$1, assign$2;\n\n        var I, lab0, lab1, lab2;\n        colors = colors.map(function (c) { return new Color_1(c); });\n        if (colors.length === 2) {\n            // linear interpolation\n            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return lab0[i] + (t * (lab1[i] - lab0[i])); }));\n                return new Color_1(lab, 'lab');\n            };\n        } else if (colors.length === 3) {\n            // quadratic bezier interpolation\n            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t) * lab0[i]) + (2 * (1-t) * t * lab1[i]) + (t * t * lab2[i]); }));\n                return new Color_1(lab, 'lab');\n            };\n        } else if (colors.length === 4) {\n            // cubic bezier interpolation\n            var lab3;\n            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);\n            I = function(t) {\n                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t)*(1-t) * lab0[i]) + (3 * (1-t) * (1-t) * t * lab1[i]) + (3 * (1-t) * t * t * lab2[i]) + (t*t*t * lab3[i]); }));\n                return new Color_1(lab, 'lab');\n            };\n        } else if (colors.length === 5) {\n            var I0 = bezier(colors.slice(0, 3));\n            var I1 = bezier(colors.slice(2, 5));\n            I = function(t) {\n                if (t < 0.5) {\n                    return I0(t*2);\n                } else {\n                    return I1((t-0.5)*2);\n                }\n            };\n        }\n        return I;\n    };\n\n    var bezier_1 = function (colors) {\n        var f = bezier(colors);\n        f.scale = function () { return scale(f); };\n        return f;\n    };\n\n    /*\n     * interpolates between a set of colors uzing a bezier spline\n     * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n     */\n\n\n\n\n    var blend = function (bottom, top, mode) {\n        if (!blend[mode]) {\n            throw new Error('unknown blend mode ' + mode);\n        }\n        return blend[mode](bottom, top);\n    };\n\n    var blend_f = function (f) { return function (bottom,top) {\n            var c0 = chroma_1(top).rgb();\n            var c1 = chroma_1(bottom).rgb();\n            return chroma_1.rgb(f(c0, c1));\n        }; };\n\n    var each = function (f) { return function (c0, c1) {\n            var out = [];\n            out[0] = f(c0[0], c1[0]);\n            out[1] = f(c0[1], c1[1]);\n            out[2] = f(c0[2], c1[2]);\n            return out;\n        }; };\n\n    var normal = function (a) { return a; };\n    var multiply = function (a,b) { return a * b / 255; };\n    var darken$1 = function (a,b) { return a > b ? b : a; };\n    var lighten = function (a,b) { return a > b ? a : b; };\n    var screen = function (a,b) { return 255 * (1 - (1-a/255) * (1-b/255)); };\n    var overlay = function (a,b) { return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255 ) * ( 1 - b / 255 )); };\n    var burn = function (a,b) { return 255 * (1 - (1 - b / 255) / (a/255)); };\n    var dodge = function (a,b) {\n        if (a === 255) { return 255; }\n        a = 255 * (b / 255) / (1 - a / 255);\n        return a > 255 ? 255 : a\n    };\n\n    // # add = (a,b) ->\n    // #     if (a + b > 255) then 255 else a + b\n\n    blend.normal = blend_f(each(normal));\n    blend.multiply = blend_f(each(multiply));\n    blend.screen = blend_f(each(screen));\n    blend.overlay = blend_f(each(overlay));\n    blend.darken = blend_f(each(darken$1));\n    blend.lighten = blend_f(each(lighten));\n    blend.dodge = blend_f(each(dodge));\n    blend.burn = blend_f(each(burn));\n    // blend.add = blend_f(each(add));\n\n    var blend_1 = blend;\n\n    // cubehelix interpolation\n    // based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n    // http://astron-soc.in/bulletin/11June/289392011.pdf\n\n    var type$k = utils.type;\n    var clip_rgb$3 = utils.clip_rgb;\n    var TWOPI$2 = utils.TWOPI;\n    var pow$6 = Math.pow;\n    var sin$2 = Math.sin;\n    var cos$3 = Math.cos;\n\n\n    var cubehelix = function(start, rotations, hue, gamma, lightness) {\n        if ( start === void 0 ) start=300;\n        if ( rotations === void 0 ) rotations=-1.5;\n        if ( hue === void 0 ) hue=1;\n        if ( gamma === void 0 ) gamma=1;\n        if ( lightness === void 0 ) lightness=[0,1];\n\n        var dh = 0, dl;\n        if (type$k(lightness) === 'array') {\n            dl = lightness[1] - lightness[0];\n        } else {\n            dl = 0;\n            lightness = [lightness, lightness];\n        }\n\n        var f = function(fract) {\n            var a = TWOPI$2 * (((start+120)/360) + (rotations * fract));\n            var l = pow$6(lightness[0] + (dl * fract), gamma);\n            var h = dh !== 0 ? hue[0] + (fract * dh) : hue;\n            var amp = (h * l * (1-l)) / 2;\n            var cos_a = cos$3(a);\n            var sin_a = sin$2(a);\n            var r = l + (amp * ((-0.14861 * cos_a) + (1.78277* sin_a)));\n            var g = l + (amp * ((-0.29227 * cos_a) - (0.90649* sin_a)));\n            var b = l + (amp * (+1.97294 * cos_a));\n            return chroma_1(clip_rgb$3([r*255,g*255,b*255,1]));\n        };\n\n        f.start = function(s) {\n            if ((s == null)) { return start; }\n            start = s;\n            return f;\n        };\n\n        f.rotations = function(r) {\n            if ((r == null)) { return rotations; }\n            rotations = r;\n            return f;\n        };\n\n        f.gamma = function(g) {\n            if ((g == null)) { return gamma; }\n            gamma = g;\n            return f;\n        };\n\n        f.hue = function(h) {\n            if ((h == null)) { return hue; }\n            hue = h;\n            if (type$k(hue) === 'array') {\n                dh = hue[1] - hue[0];\n                if (dh === 0) { hue = hue[1]; }\n            } else {\n                dh = 0;\n            }\n            return f;\n        };\n\n        f.lightness = function(h) {\n            if ((h == null)) { return lightness; }\n            if (type$k(h) === 'array') {\n                lightness = h;\n                dl = h[1] - h[0];\n            } else {\n                lightness = [h,h];\n                dl = 0;\n            }\n            return f;\n        };\n\n        f.scale = function () { return chroma_1.scale(f); };\n\n        f.hue(hue);\n\n        return f;\n    };\n\n    var digits = '0123456789abcdef';\n\n    var floor$2 = Math.floor;\n    var random = Math.random;\n\n    var random_1 = function () {\n        var code = '#';\n        for (var i=0; i<6; i++) {\n            code += digits.charAt(floor$2(random() * 16));\n        }\n        return new Color_1(code, 'hex');\n    };\n\n    var log$1 = Math.log;\n    var pow$7 = Math.pow;\n    var floor$3 = Math.floor;\n    var abs = Math.abs;\n\n\n    var analyze = function (data, key) {\n        if ( key === void 0 ) key=null;\n\n        var r = {\n            min: Number.MAX_VALUE,\n            max: Number.MAX_VALUE*-1,\n            sum: 0,\n            values: [],\n            count: 0\n        };\n        if (type(data) === 'object') {\n            data = Object.values(data);\n        }\n        data.forEach(function (val) {\n            if (key && type(val) === 'object') { val = val[key]; }\n            if (val !== undefined && val !== null && !isNaN(val)) {\n                r.values.push(val);\n                r.sum += val;\n                if (val < r.min) { r.min = val; }\n                if (val > r.max) { r.max = val; }\n                r.count += 1;\n            }\n        });\n\n        r.domain = [r.min, r.max];\n\n        r.limits = function (mode, num) { return limits(r, mode, num); };\n\n        return r;\n    };\n\n\n    var limits = function (data, mode, num) {\n        if ( mode === void 0 ) mode='equal';\n        if ( num === void 0 ) num=7;\n\n        if (type(data) == 'array') {\n            data = analyze(data);\n        }\n        var min = data.min;\n        var max = data.max;\n        var values = data.values.sort(function (a,b) { return a-b; });\n\n        if (num === 1) { return [min,max]; }\n\n        var limits = [];\n\n        if (mode.substr(0,1) === 'c') { // continuous\n            limits.push(min);\n            limits.push(max);\n        }\n\n        if (mode.substr(0,1) === 'e') { // equal interval\n            limits.push(min);\n            for (var i=1; i<num; i++) {\n                limits.push(min+((i/num)*(max-min)));\n            }\n            limits.push(max);\n        }\n\n        else if (mode.substr(0,1) === 'l') { // log scale\n            if (min <= 0) {\n                throw new Error('Logarithmic scales are only possible for values > 0');\n            }\n            var min_log = Math.LOG10E * log$1(min);\n            var max_log = Math.LOG10E * log$1(max);\n            limits.push(min);\n            for (var i$1=1; i$1<num; i$1++) {\n                limits.push(pow$7(10, min_log + ((i$1/num) * (max_log - min_log))));\n            }\n            limits.push(max);\n        }\n\n        else if (mode.substr(0,1) === 'q') { // quantile scale\n            limits.push(min);\n            for (var i$2=1; i$2<num; i$2++) {\n                var p = ((values.length-1) * i$2)/num;\n                var pb = floor$3(p);\n                if (pb === p) {\n                    limits.push(values[pb]);\n                } else { // p > pb\n                    var pr = p - pb;\n                    limits.push((values[pb]*(1-pr)) + (values[pb+1]*pr));\n                }\n            }\n            limits.push(max);\n\n        }\n\n        else if (mode.substr(0,1) === 'k') { // k-means clustering\n            /*\n            implementation based on\n            http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n            simplified for 1-d input values\n            */\n            var cluster;\n            var n = values.length;\n            var assignments = new Array(n);\n            var clusterSizes = new Array(num);\n            var repeat = true;\n            var nb_iters = 0;\n            var centroids = null;\n\n            // get seed values\n            centroids = [];\n            centroids.push(min);\n            for (var i$3=1; i$3<num; i$3++) {\n                centroids.push(min + ((i$3/num) * (max-min)));\n            }\n            centroids.push(max);\n\n            while (repeat) {\n                // assignment step\n                for (var j=0; j<num; j++) {\n                    clusterSizes[j] = 0;\n                }\n                for (var i$4=0; i$4<n; i$4++) {\n                    var value = values[i$4];\n                    var mindist = Number.MAX_VALUE;\n                    var best = (void 0);\n                    for (var j$1=0; j$1<num; j$1++) {\n                        var dist = abs(centroids[j$1]-value);\n                        if (dist < mindist) {\n                            mindist = dist;\n                            best = j$1;\n                        }\n                        clusterSizes[best]++;\n                        assignments[i$4] = best;\n                    }\n                }\n\n                // update centroids step\n                var newCentroids = new Array(num);\n                for (var j$2=0; j$2<num; j$2++) {\n                    newCentroids[j$2] = null;\n                }\n                for (var i$5=0; i$5<n; i$5++) {\n                    cluster = assignments[i$5];\n                    if (newCentroids[cluster] === null) {\n                        newCentroids[cluster] = values[i$5];\n                    } else {\n                        newCentroids[cluster] += values[i$5];\n                    }\n                }\n                for (var j$3=0; j$3<num; j$3++) {\n                    newCentroids[j$3] *= 1/clusterSizes[j$3];\n                }\n\n                // check convergence\n                repeat = false;\n                for (var j$4=0; j$4<num; j$4++) {\n                    if (newCentroids[j$4] !== centroids[j$4]) {\n                        repeat = true;\n                        break;\n                    }\n                }\n\n                centroids = newCentroids;\n                nb_iters++;\n\n                if (nb_iters > 200) {\n                    repeat = false;\n                }\n            }\n\n            // finished k-means clustering\n            // the next part is borrowed from gabrielflor.it\n            var kClusters = {};\n            for (var j$5=0; j$5<num; j$5++) {\n                kClusters[j$5] = [];\n            }\n            for (var i$6=0; i$6<n; i$6++) {\n                cluster = assignments[i$6];\n                kClusters[cluster].push(values[i$6]);\n            }\n            var tmpKMeansBreaks = [];\n            for (var j$6=0; j$6<num; j$6++) {\n                tmpKMeansBreaks.push(kClusters[j$6][0]);\n                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length-1]);\n            }\n            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a,b){ return a-b; });\n            limits.push(tmpKMeansBreaks[0]);\n            for (var i$7=1; i$7 < tmpKMeansBreaks.length; i$7+= 2) {\n                var v = tmpKMeansBreaks[i$7];\n                if (!isNaN(v) && (limits.indexOf(v) === -1)) {\n                    limits.push(v);\n                }\n            }\n        }\n        return limits;\n    };\n\n    var analyze_1 = {analyze: analyze, limits: limits};\n\n    var contrast = function (a, b) {\n        // WCAG contrast ratio\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n        a = new Color_1(a);\n        b = new Color_1(b);\n        var l1 = a.luminance();\n        var l2 = b.luminance();\n        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n    };\n\n    var sqrt$4 = Math.sqrt;\n    var atan2$2 = Math.atan2;\n    var abs$1 = Math.abs;\n    var cos$4 = Math.cos;\n    var PI$2 = Math.PI;\n\n    var deltaE = function(a, b, L, C) {\n        if ( L === void 0 ) L=1;\n        if ( C === void 0 ) C=1;\n\n        // Delta E (CMC)\n        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CMC.html\n        a = new Color_1(a);\n        b = new Color_1(b);\n        var ref = Array.from(a.lab());\n        var L1 = ref[0];\n        var a1 = ref[1];\n        var b1 = ref[2];\n        var ref$1 = Array.from(b.lab());\n        var L2 = ref$1[0];\n        var a2 = ref$1[1];\n        var b2 = ref$1[2];\n        var c1 = sqrt$4((a1 * a1) + (b1 * b1));\n        var c2 = sqrt$4((a2 * a2) + (b2 * b2));\n        var sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + (0.01765 * L1));\n        var sc = ((0.0638 * c1) / (1.0 + (0.0131 * c1))) + 0.638;\n        var h1 = c1 < 0.000001 ? 0.0 : (atan2$2(b1, a1) * 180.0) / PI$2;\n        while (h1 < 0) { h1 += 360; }\n        while (h1 >= 360) { h1 -= 360; }\n        var t = (h1 >= 164.0) && (h1 <= 345.0) ? (0.56 + abs$1(0.2 * cos$4((PI$2 * (h1 + 168.0)) / 180.0))) : (0.36 + abs$1(0.4 * cos$4((PI$2 * (h1 + 35.0)) / 180.0)));\n        var c4 = c1 * c1 * c1 * c1;\n        var f = sqrt$4(c4 / (c4 + 1900.0));\n        var sh = sc * (((f * t) + 1.0) - f);\n        var delL = L1 - L2;\n        var delC = c1 - c2;\n        var delA = a1 - a2;\n        var delB = b1 - b2;\n        var dH2 = ((delA * delA) + (delB * delB)) - (delC * delC);\n        var v1 = delL / (L * sl);\n        var v2 = delC / (C * sc);\n        var v3 = sh;\n        return sqrt$4((v1 * v1) + (v2 * v2) + (dH2 / (v3 * v3)));\n    };\n\n    // simple Euclidean distance\n    var distance = function(a, b, mode) {\n        if ( mode === void 0 ) mode='lab';\n\n        // Delta E (CIE 1976)\n        // see http://www.brucelindbloom.com/index.html?Equations.html\n        a = new Color_1(a);\n        b = new Color_1(b);\n        var l1 = a.get(mode);\n        var l2 = b.get(mode);\n        var sum_sq = 0;\n        for (var i in l1) {\n            var d = (l1[i] || 0) - (l2[i] || 0);\n            sum_sq += d*d;\n        }\n        return Math.sqrt(sum_sq);\n    };\n\n    var valid = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        try {\n            new (Function.prototype.bind.apply( Color_1, [ null ].concat( args) ));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // some pre-defined color scales:\n\n\n\n\n    var scales = {\n    \tcool: function cool() { return scale([chroma_1.hsl(180,1,.9), chroma_1.hsl(250,.7,.4)]) },\n    \thot: function hot() { return scale(['#000','#f00','#ff0','#fff'], [0,.25,.75,1]).mode('rgb') }\n    };\n\n    /**\n        ColorBrewer colors for chroma.js\n\n        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\n        Pennsylvania State University.\n\n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n        You may obtain a copy of the License at\n        http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software distributed\n        under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n        CONDITIONS OF ANY KIND, either express or implied. See the License for the\n        specific language governing permissions and limitations under the License.\n    */\n\n    var colorbrewer = {\n        // sequential\n        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\n        // diverging\n\n        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\n        // qualitative\n\n        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2'],\n    };\n\n    // add lowercase aliases for case-insensitive matches\n    for (var i$1 = 0, list$1 = Object.keys(colorbrewer); i$1 < list$1.length; i$1 += 1) {\n        var key = list$1[i$1];\n\n        colorbrewer[key.toLowerCase()] = colorbrewer[key];\n    }\n\n    var colorbrewer_1 = colorbrewer;\n\n    // feel free to comment out anything to rollup\n    // a smaller chroma.js built\n\n    // io --> convert colors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // operators --> modify existing Colors\n\n\n\n\n\n\n\n\n\n\n    // interpolators\n\n\n\n\n\n\n\n\n\n\n    // generators -- > create new colors\n    chroma_1.average = average;\n    chroma_1.bezier = bezier_1;\n    chroma_1.blend = blend_1;\n    chroma_1.cubehelix = cubehelix;\n    chroma_1.mix = chroma_1.interpolate = mix;\n    chroma_1.random = random_1;\n    chroma_1.scale = scale;\n\n    // other utility methods\n    chroma_1.analyze = analyze_1.analyze;\n    chroma_1.contrast = contrast;\n    chroma_1.deltaE = deltaE;\n    chroma_1.distance = distance;\n    chroma_1.limits = analyze_1.limits;\n    chroma_1.valid = valid;\n\n    // scale\n    chroma_1.scales = scales;\n\n    // colors\n    chroma_1.colors = w3cx11_1;\n    chroma_1.brewer = colorbrewer_1;\n\n    var chroma_js = chroma_1;\n\n    return chroma_js;\n\n})));\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\n// Detect the global object, even if operating in strict mode.\n// http://stackoverflow.com/a/14387057/265298\nvar global = (0, eval)('this'),\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","/* bezier-spline.js\n *\n * computes cubic bezier coefficients to generate a smooth\n * line through specified points. couples with SVG graphics\n * for interactive processing.\n *\n * For more info see:\n * http://www.particleincell.com/2012/bezier-splines/\n *\n * Lubos Brieda, Particle In Cell Consulting LLC, 2012\n * you may freely use this algorithm in your codes however where feasible\n * please include a link/reference to the source article\n */\n/*computes control points given knots K, this is the brain of the operation*/\nexport function computeControlPoints(K) {\n  let p1 = new Array();\n  let p2 = new Array();\n  let n = K.length - 1;\n\n  /*rhs vector*/\n  let a = new Array();\n  let b = new Array();\n  let c = new Array();\n  let r = new Array();\n\n  /*left most segment*/\n  a[0] = 0;\n  b[0] = 2;\n  c[0] = 1;\n  r[0] = K[0] + 2 * K[1];\n\n  /*internal segments*/\n  for (let i = 1; i < n - 1; i++) {\n    a[i] = 1;\n    b[i] = 4;\n    c[i] = 1;\n    r[i] = 4 * K[i] + 2 * K[i + 1];\n  }\n\n  /*right segment*/\n  a[n - 1] = 2;\n  b[n - 1] = 7;\n  c[n - 1] = 0;\n  r[n - 1] = 8 * K[n - 1] + K[n];\n\n  /*solves Ax=b with the Thomas algorithm (from Wikipedia)*/\n  for (let i = 1; i < n; i++) {\n    let m = a[i] / b[i - 1];\n    b[i] = b[i] - m * c[i - 1];\n    r[i] = r[i] - m * r[i - 1];\n  }\n\n  p1[n - 1] = r[n - 1] / b[n - 1];\n  for (let i = n - 2; i >= 0; --i) p1[i] = (r[i] - c[i] * p1[i + 1]) / b[i];\n\n  /*we have p1, now compute p2*/\n  for (let i = 0; i < n - 1; i++) p2[i] = 2 * K[i + 1] - p1[i + 1];\n\n  p2[n - 1] = 0.5 * (K[n] + p1[n - 1]);\n\n  return { p1: p1, p2: p2 };\n}\n","import { computeControlPoints } from \"./bezier-spline\";\nimport { Point, WaveryOption } from \"./types\";\nimport seedrandom from \"seedrandom\";\nimport chroma from \"chroma-js\";\n\nconst svgns = \"http://www.w3.org/2000/svg\";\n\nconst defaultOptions: WaveryOption = {\n  width: 800,\n  height: 600,\n  segmentCount: 20,\n  layerCount: 10,\n  variance: 0.75,\n  strokeWidth: 0,\n  strokeColor: \"none\",\n  seed: Date.now().toString(),\n  gradientColors: [\n    {\n      colorValue: \"yellow\",\n      position: 0\n    },\n    {\n      colorValue: \"red\",\n      position: 0.5\n    },\n    {\n      colorValue: \"navy\",\n      position: 1\n    }\n  ]\n};\n\nfunction generatePoints(\n  width: number,\n  height: number,\n  segmentCount: number,\n  layerCount: number,\n  variance: number,\n  seed: string\n): Point[][] {\n  const randFunc = seedrandom(seed);\n  const cellWidth = width / segmentCount;\n  const cellHeight = height / layerCount;\n  const moveLimitX = cellWidth * variance * 0.5;\n  const moveLimitY = cellHeight * variance;\n\n  const points: Point[][] = [];\n  for (let y = cellHeight; y < height; y += cellHeight) {\n    const pointsPerLayer: Point[] = [];\n    pointsPerLayer.push({ x: 0, y: Math.floor(y) });\n    for (let x = cellWidth; x < width; x += cellWidth) {\n      const varietalY = y - moveLimitY / 2 + randFunc() * moveLimitY;\n      const varietalX = x - moveLimitX / 2 + randFunc() * moveLimitX;\n      pointsPerLayer.push({\n        x: Math.floor(varietalX),\n        y: Math.floor(varietalY)\n      });\n    }\n    pointsPerLayer.push({ x: width, y: Math.floor(y) });\n    points.push(pointsPerLayer);\n  }\n  return points;\n}\n\nfunction generateClosedPath(\n  curvePoints: Point[],\n  leftCornerPoint: Point,\n  rightCornerPoint: Point,\n  filleColor: string,\n  strokeColor: string,\n  strokeWidth: number\n): SVGElement {\n  const xPoints = curvePoints.map((p: Point): number => p.x);\n  const yPoints = curvePoints.map((p: Point): number => p.y);\n  const xControlPoints = computeControlPoints(xPoints);\n  const yControlPoints = computeControlPoints(yPoints);\n\n  let path =\n    `M ${leftCornerPoint.x},${leftCornerPoint.y} ` +\n    `C ${leftCornerPoint.x},${leftCornerPoint.y} ` +\n    `${xPoints[0]},${yPoints[0]} ` +\n    `${xPoints[0]},${yPoints[0]} `;\n\n  for (let i = 0; i < xPoints.length - 1; i++) {\n    path +=\n      `C ${xControlPoints.p1[i]},${yControlPoints.p1[i]} ` +\n      `${xControlPoints.p2[i]},${yControlPoints.p2[i]} ` +\n      `${xPoints[i + 1]},${yPoints[i + 1]} `;\n  }\n\n  path +=\n    `C ${xPoints[xPoints.length - 1]},${yPoints[xPoints.length - 1]} ` +\n    `${rightCornerPoint.x},${rightCornerPoint.y} ` +\n    `${rightCornerPoint.x},${rightCornerPoint.y} Z`;\n\n  const svgPath = document.createElementNS(svgns, \"path\");\n  svgPath.setAttributeNS(null, \"fill\", filleColor);\n  svgPath.setAttributeNS(null, \"stroke\", strokeColor);\n  svgPath.setAttributeNS(null, \"stroke-width\", strokeWidth.toString());\n  svgPath.setAttributeNS(null, \"d\", path);\n\n  return svgPath;\n}\n\nexport class Wavery {\n  options: WaveryOption;\n  points: Point[][];\n  constructor(options: WaveryOption) {\n    this.options = { ...defaultOptions, ...options };\n    this.points = generatePoints(\n      this.options.width,\n      this.options.height,\n      this.options.segmentCount,\n      this.options.layerCount,\n      this.options.variance,\n      this.options.seed\n    );\n  }\n\n  generateSvg(): SVGElement {\n    const svg = document.createElementNS(svgns, \"svg\");\n    svg.setAttribute(\"width\", this.options.width.toString());\n    svg.setAttribute(\"height\", this.options.height.toString());\n    svg.setAttribute(\"xmlns\", svgns);\n\n    const colorScale = chroma\n      .scale(this.options.gradientColors.map(c => c.colorValue))\n      .domain(this.options.gradientColors.map(c => c.position * this.points.length));\n\n    // Fill the background first\n    const rect = document.createElementNS(svgns, \"rect\");\n    rect.setAttributeNS(null, \"x\", \"0\");\n    rect.setAttributeNS(null, \"y\", \"0\");\n    rect.setAttributeNS(null, \"height\", this.options.height.toString());\n    rect.setAttributeNS(null, \"width\", this.options.width.toString());\n    rect.setAttributeNS(null, \"fill\", colorScale(0).hex());\n    rect.setAttributeNS(null, \"stroke\", this.options.strokeColor);\n    rect.setAttributeNS(null, \"stroke-width\", this.options.strokeWidth.toString());\n    svg.appendChild(rect);\n\n    // Append each layer of wave\n    for (let i = 0; i < this.points.length; i++) {\n      svg.appendChild(\n        generateClosedPath(\n          this.points[i],\n          { x: 0, y: this.options.height },\n          { x: this.options.width, y: this.options.height },\n          colorScale(i + 1).hex(),\n          this.options.strokeColor,\n          this.options.strokeWidth\n        )\n      );\n    }\n    return svg;\n  }\n}\n\nexport default Wavery;\n"],"sourceRoot":""}